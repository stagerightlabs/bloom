{
    // Each snippet is defined under a snippet name and has a scope, prefix, body and
    // description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope
    // is left empty or omitted, the snippet gets applied to all languages. The prefix is what is
    // used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
    // $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders.
    // Placeholders with the same ids are connected.
    // Example:
    "New PHP Class": {
        "prefix": "newphp",
        "body": [
            "<?php",
            "",
            "declare(strict_types=1);",
            "",
            "namespace StageRightLabs\\Bloom\\\\$1;",
            "",
            "class ${2}",
            "{",
            "\t${0}",
            "}",
        ],
        "description": "Set up a new PHP class"
    },
    "Set up a new test class": {
        "prefix": "newtest",
        "body": [
            "<?php",
            "",
            "declare(strict_types=1);",
            "",
            "namespace StageRightLabs\\Bloom\\Tests\\\\$1;",
            "",
            "use StageRightLabs\\Bloom\\Exception\\InvalidArgumentException;",
            "use StageRightLabs\\Bloom\\Tests\\TestCase;",
            "",
            "/**",
            " * @coversDefaultClass \\StageRightLabs\\Bloom\\\\$1\\\\$2",
            " */",
            "class $2Test extends TestCase",
            "{",
            "    $0",
            "}"
        ],
        "description": "Set up a new test class"
    },
    "Set up a new typedef class": {
        "prefix": "newtypedef",
        "body": [
            "<?php",
            "",
            "declare(strict_types=1);",
            "",
            "namespace StageRightLabs\\Bloom\\\\$1;",
            "",
            "use StageRightLabs\\Bloom\\Utility\\Copy;",
            "use StageRightLabs\\Bloom\\Utility\\NoChanges;",
            "use StageRightLabs\\Bloom\\Utility\\NoConstructor;",
            "use StageRightLabs\\PhpXdr\\Interfaces\\XdrTypedef;",
            "use StageRightLabs\\PhpXdr\\XDR;",
            "",
            "class $2 implements XdrTypedef",
            "{",
            "    /**",
            "     * Properties",
            "     */",
            "    use NoConstructor;",
            "    use NoChanges;",
            "    public string \\$value;",
            "",
            "    /**",
            "     * Write the value as XDR.",
            "     *",
            "     * @param XDR \\$xdr",
            "     * @return void",
            "     */",
            "    public function toXdr(XDR &\\$xdr): void",
            "    {",
            "        $3",
            "    }",
            "",
            "    /**",
            "     * Read the value from XDR.",
            "     *",
            "     * @param XDR \\$xdr",
            "     * @return static",
            "     */",
            "    public static function newFromXdr(XDR &\\$xdr): static",
            "    {",
            "        $4",
            "    }",
            "",
            "    /**",
            "     * Return the underlying value.",
            "     *",
            "     * @return string",
            "     */",
            "    public function getValue(): string",
            "    {",
            "        return \\$this->value;",
            "    }",
            "",
            "    /**",
            "     * Set the value of the string.",
            "     *",
            "     * @param string \\$value",
            "     * @return static",
            "     */",
            "    public function withValue(string \\$value): static",
            "    {",
            "        \\$clone = Copy::deep(\\$this);",
            "        \\$clone->value = \\$value;",
            "",
            "        return \\$clone;",
            "    }",
            "}",
            ""
        ],
        "description": "Set up a new typedef class"
    },
    "Set up a new struct class": {
        "prefix": "newstruct",
        "body": [
            "<?php",
            "",
            "declare(strict_types=1);",
            "",
            "namespace StageRightLabs\\Bloom\\\\$1;",
            "",
            "use StageRightLabs\\Bloom\\Exception\\InvalidArgumentException;",
            "use StageRightLabs\\Bloom\\Utility\\NoChanges;",
            "use StageRightLabs\\Bloom\\Utility\\NoConstructor;",
            "use StageRightLabs\\PhpXdr\\Interfaces\\XdrStruct;",
            "use StageRightLabs\\PhpXdr\\XDR;",
            "",
            "final class $2 implements XdrStruct",
            "{",
            "    /**",
            "     * Properties",
            "     */",
            "    use NoChanges;",
            "    use NoConstructor;",
            "    $3",
            "",
            "    /**",
            "     * Write the value as XDR.",
            "     *",
            "     * @param XDR \\$xdr",
            "     * @throws InvalidArgumentException",
            "     * @return void",
            "     */",
            "    public function toXdr(XDR &\\$xdr): void",
            "    {",
            "        ",
            "    }",
            "",
            "    /**",
            "     * Read the value from XDR.",
            "     *",
            "     * @param XDR \\$xdr",
            "     * @return static",
            "     */",
            "    public static function newFromXdr(XDR &\\$xdr): static",
            "    {",
            "        ",
            "    }",
            "}",
            ""
        ],
        "description": "Set up a new struct class"
    },
    "Set up a new union class": {
        "prefix": "newunion",
        "body": [
            "<?php",
            "",
            "declare(strict_types=1);",
            "",
            "namespace StageRightLabs\\Bloom\\\\$1;",
            "",
            "use StageRightLabs\\Bloom\\Primitives\\Union;",
            "use StageRightLabs\\PhpXdr\\Interfaces\\XdrUnion;",
            "",
            "final class $2 extends Union implements XdrUnion",
            "{",
            "    /**",
            "     * What type of discriminator will this union use?",
            "     *",
            "     * @return string",
            "     */",
            "    public static function getXdrDiscriminatorType(): string",
            "    {",
            "        return $3;",
            "    }",
            "",
            "    /**",
            "     * What are the possible value types for this union?",
            "     *",
            "     * @return array<int|string, string>",
            "     */",
            "    public static function arms(): array",
            "    {",
            "        return [",
            "            $0",
            "        ];",
            "    }",
            "}",
            ""
        ],
        "description": "Set up a new union class"
    },
    "Set up a new union test": {
        "prefix": "newuniontest",
        "body": [
            "<?php",
            "",
            "declare(strict_types=1);",
            "",
            "namespace StageRightLabs\\Bloom\\Tests\\\\$1;",
            "",
            "use StageRightLabs\\Bloom\\Tests\\TestCase;",
            "",
            "/**",
            " * @coversDefaultClass \\StageRightLabs\\Bloom\\\\$1\\\\$2",
            " */",
            "class $2Test extends TestCase",
            "{",
            "    /**",
            "     * @test",
            "     * @covers ::getXdrDiscriminatorType",
            "     */",
            "    public function it_defines_an_xdr_union_discriminator()",
            "    {",
            "        \\$this->assertEquals($3::class, $2::getXdrDiscriminatorType());",
            "    }",
            "",
            "    /**",
            "     * @test",
            "     * @covers ::arms",
            "     */",
            "    public function it_returns_arms_as_defined_by_spec()",
            "    {",
            "        \\$expected = [",
            "            $5",
            "        ];",
            "",
            "        \\$this->assertEquals(\\$expected, $2::arms());",
            "    }",
            "",
            "    /**",
            "     * @test",
            "     * @covers ::empty",
            "     * @covers ::unwrap",
            "     */",
            "    public function it_can_be_instantiated_as_an_empty_union()",
            "    {",
            "        $$4 = $2::none();",
            "        \\$this->assertNull($$4->unwrap());",
            "    }",
            "}",
            ""
        ],
        "description": "Set up a new union test"
    },
    "Set up a new enumeration class": {
        "prefix": "newenum",
        "body": [
            "<?php",
            "",
            "declare(strict_types=1);",
            "",
            "namespace StageRightLabs\\Bloom\\\\$1;",
            "",
            "use StageRightLabs\\Bloom\\Primitives\\Enumeration;",
            "use StageRightLabs\\PhpXdr\\Interfaces\\XdrEnum;",
            "",
            "final class $2 extends Enumeration implements XdrEnum",
            "{",
            "    /**",
            "     * Constants",
            "     */",
            "    $4",
            "",
            "    /**",
            "     * The options available in this enumeration.",
            "     *",
            "     * @return array<int, string>",
            "     */",
            "    public static function getOptions(): array",
            "    {",
            "        return [];",
            "    }",
            "",
            "   /**",
            "    * Return the selected type.",
            "    *",
            "    * @return string",
            "    */",
            "   public function get${3:Type}(): string",
            "   {",
            "       return \\$this->getValue();",
            "   }",
            "",
            "   /**",
            "    * Create a new instance pre-selected as EMPTY.",
            "    *",
            "    * @return static",
            "    */",
            "   public static function empty(): static",
            "   {",
            "       return (new static())->withValue(self::EMPTY);",
            "   }",
            "}",
            ""
        ],
        "description": "Set up a new enumeration class"
    },
    "Set up a new enumeration class test": {
        "prefix": "newenumtest",
        "body": [
            "<?php",
            "",
            "declare(strict_types=1);",
            "",
            "namespace StageRightLabs\\Bloom\\Tests\\\\$1;",
            "",
            "use StageRightLabs\\Bloom\\Tests\\TestCase;",
            "",
            "/**",
            " * @coversDefaultClass \\StageRightLabs\\Bloom\\\\$1\\\\$2",
            " */",
            "class $2Test extends TestCase",
            "{",
            "    /**",
            "     * @test",
            "     * @covers ::getOptions",
            "     */",
            "    public function it_returns_options_as_defined_by_spec()",
            "    {",
            "        \\$expected = [",
            "           $4",
            "        ];",
            "        $$3 = new $2();",
            "",
            "        \\$this->assertEquals(\\$expected, $$3->getOptions());",
            "    }",
            "",
            "    /**",
            "     * @test",
            "     * @covers ::empty",
            "     * @covers ::getType",
            "     */",
            "    public function it_can_be_instantiated_as_an_empty_type()",
            "    {",
            "        $$3 = $2::empty();",
            "",
            "        \\$this->assertInstanceOf($2::class, $$3);",
            "        \\$this->assertEquals($2::EMPTY, $$3->getType());",
            "    }",
            "}",
            ""
        ],
        "description": ""
    },
    "Set up a new array class": {
        "prefix": "newarray",
        "body": [
            "<?php",
            "",
            "declare(strict_types=1);",
            "",
            "namespace StageRightLabs\\Bloom\\\\$1;",
            "",
            "use StageRightLabs\\Bloom\\Primitives\\Arr;",
            "use StageRightLabs\\PhpXdr\\Interfaces\\XdrArray;",
            "",
            "/**",
            " * @extends Arr<$2>",
            " */",
            "class $3 extends Arr implements XdrArray",
            "{",
            "    /**",
            "     * Properties",
            "     */",
            "    public const MAX_LENGTH = ${4:20};",
            "",
            "    /**",
            "     * The XDR encoding type for array members.",
            "     *",
            "     * @return string",
            "     */",
            "    public static function getXdrType(): string",
            "    {",
            "        return $2::class;",
            "    }",
            "",
            "    /**",
            "     * The maximum number of allowed array members.",
            "     *",
            "     * @return int",
            "     */",
            "    public static function getMaxLength(): int",
            "    {",
            "        return self::MAX_LENGTH;",
            "    }",
            "",
            "    /**",
            "     * Instantiate an empty array.",
            "     *",
            "     * @return static",
            "     */",
            "    public static function empty(): static",
            "    {",
            "        return static::of([]);",
            "    }",
            "}",
            ""
        ],
        "description": "Set up a new array class"
    },
    "Set up a new array test": {
        "prefix": "newarraytest",
        "body": [
            "<?php",
            "",
            "declare(strict_types=1);",
            "",
            "namespace StageRightLabs\\Bloom\\Tests\\\\$1;",
            "",
            "use StageRightLabs\\Bloom\\Tests\\TestCase;",
            "",
            "/**",
            " * @coversDefaultClass \\StageRightLabs\\Bloom\\\\$1\\\\$2",
            " */",
            "class $2Test extends TestCase",
            "{",
            "    /**",
            "     * @test",
            "     * @covers ::getXdrType",
            "     */",
            "    public function it_defines_an_xdr_type()",
            "    {",
            "        \\$this->assertEquals($3::class, $2::getXdrType());",
            "    }",
            "",
            "    /**",
            "     * @test",
            "     * @covers ::getMaxLength",
            "     */",
            "    public function it_defines_a_max_length()",
            "    {",
            "        \\$this->assertEquals($2::MAX_LENGTH, $2::getMaxLength());",
            "    }",
            "",
            "    /**",
            "     * @test",
            "     * @covers ::empty",
            "     */",
            "    public function it_can_be_instantiated_as_an_empty_list()",
            "    {",
            "        $$4 = $2::empty();",
            "",
            "        \\$this->assertInstanceOf($2::class, $$4);",
            "        \\$this->assertEmpty($$4);",
            "    }",
            "}",
            ""
        ],
        "description": "Set up a new array test"
    },
    "Set up a new optional class": {
        "prefix": "newoptional",
        "body": [
            "<?php",
            "",
            "declare(strict_types=1);",
            "",
            "namespace StageRightLabs\\Bloom\\\\$1;",
            "",
            "use StageRightLabs\\Bloom\\Primitives\\Optional;",
            "use StageRightLabs\\PhpXdr\\Interfaces\\XdrOptional;",
            "",
            "final class Optional$2 extends Optional implements XdrOptional",
            "{",
            "    /**",
            "     * The encoding type for the optional value.",
            "     *",
            "     * @return string",
            "     */",
            "    public static function getXdrValueType(): string",
            "    {",
            "        return $2::class;",
            "    }",
            "",
            "    /**",
            "     * Create an instance from an $2.",
            "     *",
            "     * @param $2 $$3",
            "     * @return static",
            "     */",
            "    public static function some($2 $$3): static",
            "    {",
            "        return self::none()->withValue($$3);",
            "    }",
            "",
            "    /**",
            "     * Return the optional value.",
            "     *",
            "     * @return $2|null",
            "     */",
            "    public function unwrap(): ?$2",
            "    {",
            "        return \\$this->getValue();",
            "    }",
            "}",
            ""
        ],
        "description": "Set up a new optional"
    },
    "Set up a new optional test": {
        "prefix": "newoptionaltest",
        "body": [
            "<?php",
            "",
            "declare(strict_types=1);",
            "",
            "namespace StageRightLabs\\Bloom\\Tests\\\\$1;",
            "",
            "use StageRightLabs\\Bloom\\Tests\\TestCase;",
            "",
            "/**",
            " * @coversDefaultClass \\StageRightLabs\\Bloom\\\\$1\\\\Optional$2",
            " */",
            "class Optional$2Test extends TestCase",
            "{",
            "    /**",
            "     * @test",
            "     * @covers ::getXdrValueType",
            "     */",
            "    public function it_defines_an_xdr_value_type()",
            "    {",
            "        \\$this->assertEquals($2::class, Optional$2::getXdrValueType());",
            "    }",
            "",
            "    /**",
            "     * @test",
            "     * @covers ::some",
            "     */",
            "    public function it_can_be_instantiated_from_an_$3()",
            "    {",
            "        \\$optional = Optional$2::some($$4);",
            "        \\$this->assertInstanceOf(Optional$2::class, \\$optional);",
            "    }",
            "",
            "    /**",
            "     * @test",
            "     * @covers ::unwrap",
            "     */",
            "    public function it_returns_the_$3()",
            "    {",
            "        \\$optional = Optional$2::some($$4);",
            "        \\$this->assertInstanceOf($2::class, \\$optional->unwrap());",
            "    }",
            "}",
            ""
        ],
        "description": "Set up a new optional test"
    },
    "PHP Class Property Getter": {
        "prefix": "getter",
        "body": [
            "/**",
            " * Get the $1.",
            " *",
            " * @return $2",
            " */",
            "public function get$3(): $2",
            "{",
            "    return \\$this->$4;",
            "}$0",
        ],
        "description": "Add a property getter to a PHP class",
    },
    "PHP Class Property Immutable Setter": {
        "prefix": "setter",
        "body": [
            "/**",
            " * Accept a $1.",
            " *",
            " * @param $2 \\$$3",
            " * @return static",
            " */",
            "public function with$4($2 \\$$3): static",
            "{",
            "    /** @var static **/",
            "    \\$clone = Copy::deep(\\$this);",
            "    \\$clone->${3} = Copy::deep(\\$${3});",
            "",
            "    return \\$clone;",
            "}${0}",
        ],
        "description": "Add an immutable setter to a PHP class"
    },
    "PHPUnit Assert Instance Of": {
        "prefix": "aio",
        "body": "\\$this->assertInstanceOf($0",
    },
    "PHPUnit Assert Equals": {
        "prefix": "ae",
        "body": "\\$this->assertEquals($0",
    },
    "PHPUnit Assert Null": {
        "prefix": "an",
        "body": "\\$this->assertNull($0",
    },
    "PHPUnit Assert True": {
        "prefix": "at",
        "body": "\\$this->assertTrue($0",
    },
    "PHPUnit Assert False": {
        "prefix": "af",
        "body": "\\$this->assertFalse($0",
    },
    "PHPUnit Expect Exception": {
        "prefix": "ee",
        "body": "\\$this->expectException(${1:InvalidArgumentException::class});$0",
    }
}
